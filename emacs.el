(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))
(package-initialize)

;; mac 
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (setq mac-right-function-modifier 'none)
  (setq mac-function-modifier 'ctrl)
(exec-path-from-shell-copy-env "GOPATH"))

;; general
(setq ns-function-modifier 'ctrl)
(setq nord-region-highlight "frost")
(load-theme 'github t)
(delete-selection-mode 1)
(setq backup-inhibited t)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq window-preserve-size t)
(setq explicit-shell-file-name "/bin/zsh")
(setq exec-path '("." "~/bin" "~/go/bin" "/usr/local/bin" "/usr/bin" "/bin" "/usr/sbin" "/sbin"))
;; powerline
;;(powerline-vim-theme)

;; evil, evil-leader
(global-evil-leader-mode)
(evil-leader/set-leader ",")
(evil-leader/set-key "m" 'counsel-imenu)
(evil-leader/set-key "d" 'deer)
(evil-leader/set-key "q" 'kill-this-buffer)
(evil-mode)
(require 'treemacs-evil)
(add-hook 'term-mode-hook 'evil-emacs-state)
(setq-default evil-escape-key-sequence "jk")
(setq evil-emacs-state-cursor '("deepskyblue3" box))
(setq evil-normal-state-cursor '("green3" box))
(setq evil-visual-state-cursor '("orange" box))
(setq evil-insert-state-cursor '("red" (bar . 3)))
(setq evil-replace-state-cursor '("red" (hbar . 3)))
(setq evil-operator-state-cursor '("red" hollow))
(define-key evil-normal-state-map "\C-w" 'evil-delete)
(define-key evil-insert-state-map "\C-w" 'evil-delete)
(define-key evil-insert-state-map "\C-r" 'search-backward)
(define-key evil-visual-state-map "\C-w" 'evil-delete)
(define-key evil-insert-state-map "\C-t" '(lambda () (interactive) (counsel-fzf "" "~" ">")))
(define-key evil-normal-state-map "\C-t" '(lambda () (interactive) (counsel-fzf "" "~" ">")))

;; golang go-mode
(defun my-go-mode-hook ()
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  (local-set-key (kbd "C-c C-c") '(lambda () (interactive) (save-some-buffers 1) (compile "go build -v")))
  (local-set-key (kbd "C-c C-g") 'go-goto-imports)
  (local-set-key (kbd "C-c d") 'godoc-at-point)
  (local-set-key (kbd "C-c j") '(lambda () (interactive) (go-def-jump) (evil-scroll-line-to-center)))
  (local-set-key (kbd "C-c j") 'godef-jump)
  (local-set-key (kbd "C-c k") 'godoc)
  (local-set-key (kbd "C-c r") '(lambda () (interactive) (save-some-buffers 1) (shell-command (format "time go run %s" (shell-quote-argument (buffer-file-name))))))
  ;; (setenv "GOPATH" "/Users/gqf5100/go")
  ;; (setenv "PATH" (concat (getenv "PATH") ":/Users/gqf5100/go/bin"))
  ;; (setq exec-path (append exec-path '("/Users/gqf5100/go/bin")))
  (go-eldoc-setup)
  (go-guru-hl-identifier-mode)
  (ac-config-default)
  (auto-complete-mode 1)
  (flycheck-mode -1))
(with-eval-after-load 'go-mode (require 'go-autocomplete))
(add-hook 'go-mode-hook 'my-go-mode-hook)

;; global keys
(global-set-key (kbd "C-x g") 'counsel-projectile-ag)
(global-set-key (kbd "C-c m") 'counsel-imenu)
(global-set-key (kbd "C-x m") 'counsel-imenu)
(global-set-key (kbd "C-x d") 'dired-jump)
(global-set-key (kbd "M-ö") "{")
(global-set-key (kbd "M-ä") "}")
(global-set-key (kbd "C-x n") 'treemacs-toggle)
(global-set-key (kbd "C-'") "'")
(global-set-key (kbd "C-x o") 'ace-window)
(global-set-key (kbd "C-x C-u") 'undo)
(global-set-key (kbd "<C-iso-lefttab>") 'switch-to-last-window)
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "<home>") 'beginning-of-buffer)
(global-set-key (kbd "<end>") 'end-of-buffer)
(global-set-key (kbd "C-<home>") 'winner-undo)
(global-set-key (kbd "C-<end>") 'winner-redo)
(global-set-key (kbd "C-x C-s") 'save-buffer)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-<tab>") 'other-window)
(global-set-key (kbd "M-i") #'avy-goto-word-0)
(global-set-key (kbd "C-x k") 'kill-buffer-and-window)
(global-set-key (kbd "C-x t") 'eshell)
(global-set-key (kbd "C-s") 'swiper)
(global-unset-key (kbd "C-z"))
(define-key minibuffer-local-map (kbd "ESC") 'keyboard-escape-quit)

(defun switch-to-last-window ()
  (interactive)
  (let ((win (get-mru-window t t t)))
    (unless win (error "Last window not found."))
    (let ((frame (window-frame win)))
      (raise-frame frame)
      (select-frame frame)
      (select-window win))))
(defun compilation-finish-function (buf str)
    (if (null (string-match ".*exited abnormally.*" str))
        (progn
            (run-at-time
            "1 sec" nil 'delete-windows-on
            (get-buffer-create "*compilation*"))
        (message "No Compilation Errors!"))))
(add-hook 'compilation-finish-functions 'compilation-finish-function)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ace-window-display-mode t)
 '(auto-save-default nil)
 '(avy-background nil)
 '(beacon-blink-when-focused t)
 '(beacon-blink-when-window-scrolls nil)
 '(beacon-dont-blink-major-modes
   (quote
	(t magit-status-mode magit-popup-mode inf-ruby-mode mu4e-headers-mode gnus-summary-mode gnus-group-mode eshell-mode)))
 '(beacon-mode t)
 '(blink-cursor-blinks 30)
 '(blink-cursor-mode nil)
 '(cider-auto-jump-to-error t)
 '(cider-auto-select-error-buffer nil)
 '(cider-debug-display-locals t)
 '(cider-debug-print-length 25)
 '(cider-eldoc-display-context-dependent-info t)
 '(cider-font-lock-dynamically (quote (macro function var deprecated core)))
 '(cider-overlays-use-font-lock t)
 '(cider-repl-display-help-banner nil)
 '(cider-repl-display-in-current-window t)
 '(cider-save-file-on-load t)
 '(cider-show-error-buffer (quote except-in-repl))
 '(cider-stacktrace-print-length 10)
 '(cider-stacktrace-print-level 5)
 '(cider-use-tooltips nil)
 '(cljr-ignore-analyzer-errors t)
 '(cljr-warn-on-eval nil)
 '(company-global-modes nil)
 '(company-idle-delay nil)
 '(compilation-ask-about-save nil)
 '(compilation-auto-jump-to-first-error t)
 '(compilation-window-height 12)
 '(counsel-mode t)
 '(cursor-in-non-selected-windows nil)
 '(custom-safe-themes
   (quote
	("ffca7ac44bfe9d585363f6bbf29f19529de216f85dce7a831dfc28883959ec05" "fd24b2c570dbd976e17a63ba515967600acb7d2f9390793859cb82f6a2d5dacd" "83db918b06f0b1df1153f21c0d47250556c7ffb5b5e6906d21749f41737babb7" "7527f3308a83721f9b6d50a36698baaedc79ded9f6d5bd4e9a28a22ab13b3cb1" "e3fc83cdb5f9db0d0df205f5da89af76feda8c56d79a653a5d092c82c7447e02" "3b5ce826b9c9f455b7c4c8bff22c020779383a12f2f57bf2eb25139244bb7290" "cdd26fa6a8c6706c9009db659d2dffd7f4b0350f9cc94e5df657fa295fffec71" "4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" "e8825f26af32403c5ad8bc983f8610a4a4786eb55e3a363fa9acb48e0677fe7e" "4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "db73e672b32ebfe06b8bee3ca51769a56688fc6a7baed75bf88ef8ebf091c797" "ff7625ad8aa2615eae96d6b4469fcc7d3d20b2e1ebc63b761a349bebbb9d23cb" "a24c5b3c12d147da6cef80938dca1223b7c7f70f2f382b26308eba014dc4833a" "732b807b0543855541743429c9979ebfb363e27ec91e82f463c91e68c772f6e3" "e9460a84d876da407d9e6accf9ceba453e2f86f8b86076f37c08ad155de8223c" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "4980e5ddaae985e4bae004280bd343721271ebb28f22b3e3b2427443e748cd3f" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "8ed752276957903a270c797c4ab52931199806ccd9f0c3bb77f6f4b9e71b9272" "a4c9e536d86666d4494ef7f43c84807162d9bd29b0dfd39bdf2c3d845dcc7b2e" default)))
 '(default-frame-alist (quote ((vertical-scroll-bars))))
 '(delete-selection-mode t)
 '(electric-indent-mode t)
 '(electric-pair-mode t)
 '(enable-recursive-minibuffers t)
 '(eshell-cd-shows-directory t)
 '(eshell-cmpl-autolist t)
 '(eshell-cmpl-cycle-completions t)
 '(eshell-cmpl-cycle-cutoff-length nil)
 '(evil-commentary-mode t)
 '(evil-escape-mode t)
 '(flycheck-error-list-minimum-level (quote error))
 '(font-use-system-font nil)
 '(global-auto-revert-mode t)
 '(global-company-mode nil)
 '(global-evil-surround-mode t)
 '(global-hl-line-mode t)
 '(global-hl-line-sticky-flag nil)
 '(global-undo-tree-mode nil)
 '(hl-line-sticky-flag nil)
 '(inhibit-startup-screen t)
 '(initial-frame-alist (quote ((vertical-scroll-bars) (height . 35) (width . 92))))
 '(initial-scratch-message nil)
 '(ivy-count-format "%d/%d ")
 '(ivy-display-function (quote ivy-display-function-overlay))
 '(ivy-display-style (quote fancy))
 '(ivy-ignore-buffers
   (quote
	("^\\*Completions\\*$" "^\\*Messages\\*$" "^\\*Help\\*$" "\\` ")))
 '(ivy-mode t)
 '(ivy-tab-space t)
 '(ivy-use-virtual-buffers t)
 '(make-backup-files nil)
 '(max-mini-window-height 0.45)
 '(menu-bar-mode nil)
 '(mouse-wheel-mode t)
 '(nrepl-hide-special-buffers t)
 '(package-selected-packages
   (quote
	(go-guru guru-mode counsel-projectile ag projectile evil-surround disable-mouse evil-anzu dired-ranger evil-leader nord-theme intellij-theme github-theme soft-charcoal-theme evil-commentary powerline-evil go-rename go-eldoc treemacs-evil evil-escape key-chord evil go-autocomplete exec-path-from-shell go-mode treemacs flycheck undo-tree shackle beacon smex fzf use-package csv-mode solarized-theme counsel avy cider ivy)))
 '(powerline-default-separator nil)
 '(powerline-display-buffer-size nil)
 '(ranger-cleanup-eagerly t)
 '(ring-bell-function (quote ignore))
 '(scroll-bar-mode nil)
 '(scroll-conservatively 10000)
 '(scroll-preserve-screen-position 1)
 '(shackle-default-rule (quote (:select t :popup nil :align (quote right))))
 '(shackle-default-size 12)
 '(shackle-mode t)
 '(shackle-rules
   (quote
	(("*eshell*" :popup t :align
	  (quote below))
	 (grep-mode :select t :align
				(quote below))
	 (cider-stacktrace-mode :select t :align
							(quote below))
	 ("*cider-scratch*" :same t)
	 ("*cider-test-report*" :select t :align
	  (quote below))
	 (help-mode :select t :align
				(quote below))
	 (cider-repl-mode :select t :same t :align
					  (quote below))
	 ("^\\*.+\\*$" :regexp t :select t :same nil :popup nil :align
	  (quote below)))))
 '(show-paren-mode t)
 '(show-paren-when-point-inside-paren t)
 '(tab-always-indent nil)
 '(tab-width 4)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(treemacs-filewatch-mode t)
 '(treemacs-follow-mode t)
 '(treemacs-git-mode nil)
 '(treemacs-indentation 1)
 '(treemacs-is-never-other-window t)
 '(treemacs-show-hidden-files nil)
 '(treemacs-silent-filewatch t)
 '(treemacs-silent-refresh t)
 '(treemacs-width 20)
 '(truncate-lines nil)
 '(vc-follow-symlinks t)
 '(which-key-idle-delay 2.0)
 '(which-key-mode nil)
 '(winner-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Hack" :foundry "SRC" :slant normal :weight normal :height 138 :width normal))))
 '(show-paren-match ((t (:foreground "orange red" :background nil :weight bold)))))
(provide 'emacs)
;;; emacs.el ends here

(put 'dired-find-alternate-file 'disabled nil)
